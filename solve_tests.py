import solve

mazes_test = {
    1: [
        [" ", "+", "S"],
        [" ", " ", "+"],
        [" ", " ", "+"],
        ["+", " ", " "],
        ["+", "E", "+"],
    ],
    2: [
        ["S", " ", "+"],
        [" ", " ", "+"],
        [" ", " ", " "],
        ["E", "+", "+"],
    ],
    3: [
        ["+", "+", "S", "+"],
        ["+", " ", " ", "+"],
        [" ", " ", "+", "+"],
        [" ", "+", " ", "+"],
        [" ", " ", "+", "+"],
        [" ", " ", "+", "+"],
        ["+", " ", " ", "+"],
        ["+", "+", "E", "+"],
    ],
    4: [
        ["+", "+", "+", "+", "+", "S", "+"],
        [" ", " ", " ", " ", "+", " ", "+"],
        ["+", " ", "+", " ", "+", " ", "+"],
        ["+", " ", "+", " ", " ", " ", "+"],
        ["+", " ", "+", "+", "+", " ", "+"],
        ["+", " ", " ", " ", "+", " ", "+"],
        ["+", " ", "+", "+", "+", "+", "+"],
        ["+", " ", " ", " ", "+", "+", "+"],
        ["+", "+", "+", "E", "+", "+", "+"],
    ],
    5: [
        ["+", "+", "+", "S", "+", "+", "+"],
        [" ", " ", " ", " ", " ", " ", " "],
        [" ", " ", "+", "+", " ", " ", " "],
        [" ", " ", " ", " ", " ", " ", " "],
        [" ", " ", "+", "+", "+", " ", " "],
        [" ", " ", " ", " ", " ", " ", " "],
        [" ", " ", "+", " ", "+", " ", " "],
        [" ", " ", " ", " ", " ", " ", " "],
        ["+", "+", "+", "E", "+", "+", "+"],
    ],
    6: [
        "+++++++++++++++++++++++++++++++++++++++++++++++++++",
        "+               +                                 +",
        "+  ++++++++++  +++++++++++++  +++++++  ++++++++++++",
        "+S          +                 +               ++  +",
        "+  +++++++  +++++++++++++  +++++++++++++++++++++  +",
        "+  +     +  +           +  +                 +++  +",
        "+  +  +  +  +  +  ++++  +  +  +++++++++++++  +++  +",
        "+  +  +  +  +  +  +        +  +  +        +       +",
        "+  +  ++++  +  ++++++++++  +  +  ++++  +  +  ++   +",
        "+  +     +  +          +   +           +  +  ++  ++",
        "+  ++++  +  +++++++ ++++++++  +++++++++++++  ++  ++",
        "+     +  +     +              +              ++   +",
        "++++  +  ++++++++++ +++++++++++  ++++++++++  +++  +",
        "+  +  +                    +     +     +  +  +++  +",
        "+  +  ++++  +++++++++++++  +  ++++  +  +  +  ++   +",
        "+  +  +     +     +     +  +  +     +     +  ++  ++",
        "+  +  +  +++++++  ++++  +  +  +  ++++++++++  ++  ++",
        "+                       +  +  +              ++  ++",
        "+ ++++++             +  +  +  +  +++        +++  ++",
        "+ ++++++ ++++++ +++++++++    ++ ++   ++++++++++  ++",
        "+ +    +    +++ +     +++++++++ ++  +++++++    + ++",
        "+ ++++ ++++ +++ + +++ +++    ++    ++    ++ ++ + ++",
        "+ ++++    +     + +++ +++ ++ ++++++++ ++ ++ ++   ++",
        "+      ++ +++++++E+++     ++          ++    +++++++",
        "+++++++++++++++++++++++++++++++++++++++++++++++++++",
    ],
    7: [
        "+++++++++++++++++++++++++++++++++++++++++++++++++++",
        "+               +                                 +",
        "+ ++++++             +  +  +  +  +++        +++  ++",
        "+  +  ++++  +++++++++++++  +  ++++  +  +  +  ++   +",
        "+  +  +     +     +     +  +  +     +     +  ++  ++",
        "+  +  +  +++++++  ++++  +  +  +  ++++++++++  ++  ++",
        "+                       +  +  +              ++  ++",
        "+ ++++++             +  +  +  +  +++        +++  ++",
        "+ ++++++ ++++++ +++++++++    ++ ++   ++++++++++  ++",
        "+  +  +  +  +  +  +        +  +  +        +       +",
        "+  +  ++++  +  ++++++++++  +  +  ++++  +  +  ++   +",
        "+  +     +  +          +   +           +  +  ++  ++",
        "+  ++++  +  +++++++ ++++++++  +++++++++++++  ++  ++",
        "+     +  +     +              +              ++   +",
        "+  ++++++++++  +++++++++++++  +++++++  ++++++++++++",
        "+S          +                 +               ++  +",
        "+  +++++++  +++++++++++++  +++++++++++++++++++++  +",
        "+  +     +  +           +  +                 +++  +",
        "+  +  +  +  +  +  ++++  +  +  +++++++++++++  +++  +",
        "+  +  +  +  +  +  +        +  +  +        +       +",
        "+  +  ++++  +  ++++++++++  +  +  ++++  +  +  ++   +",
        "+  +     +  +          +   +           +  +  ++  ++",
        "+  ++++  +  +++++++ ++++++++  +++++++++++++  ++  ++",
        "+     +  +     +              +              ++   +",
        "++++  +  ++++++++++ +++++++++++  ++++++++++  +++  +",
        "+  +  +                    +     +     +  +  +++  +",
        "+  +  ++++  +++++++++++++  +  ++++  +  +  +  ++   +",
        "+  +  +     +     +     +  +  +     +     +  ++  ++",
        "+  +  +  +++++++  ++++  +  +  +  ++++++++++  ++  ++",
        "+                       +  +  +              ++  ++",
        "+ ++++++             +  +  +  +  +++        +++  ++",
        "+ ++++++ ++++++ +++++++++    ++ ++   ++++++++++  ++",
        "+ +    +    +++ +     +++++++++ ++  +++++++    + ++",
        "+ ++++ ++++ +++ + +++ +++    ++    ++    ++ ++ + ++",
        "+ ++++    +     + +++ +++ ++ ++++++++ ++ ++ ++   ++",
        "+      ++ +++++++ +++     ++          ++    +++++++",
        "+     +  +     +              +              ++   +",
        "++++  +  ++++++++++ +++++++++++  ++++++++++  +++  +",
        "+  +  +                    +     +     +  +  +++  +",
        "+      ++ +++++++ +++     ++          ++    +++++++",
        "+     +  +     +              +              ++   +",
        "++++  +  ++++++++++ +++++++++++  ++++++++++  +++  +",
        "+  +  +                    +     +     +  +  +++  +",
        "+  +  ++++  +++++++++++++  +  ++++  +  +  +  ++   +",
        "+  +  +     +     +     +  +  +     +     +  ++  ++",
        "+  +  +  +++++++  ++++  +  +  +  ++++++++++  ++  ++",
        "+                       +  +  +              ++  ++",
        "+ ++++++             +  +  +  +  +++        +++  ++",
        "+  +  ++++  +++++++++++++  +  ++++  +  +  +  ++   +",
        "+  +  +     +     +     +  +  +     +     +  ++  ++",
        "+  +  +  +++++++  ++++  +  +  +  ++++++++++  ++  ++",
        "+                       +  +  +              ++  ++",
        "+ ++++++             +  +  +  +  +++        +++  ++",
        "+ ++++++ ++++++ +++++++++    ++ ++   ++++++++++  ++",
        "+  +  +  +  +  +  +        +  +  +        +       +",
        "+  +  ++++  +  ++++++++++  +  +  ++++  +  +  ++   +",
        "+  +     +  +          +   +           +  +  ++  ++",
        "+  ++++  +  +++++++ ++++++++  +++++++++++++  ++  ++",
        "+     +  +     +              +              ++   +",
        "+ +    +    +++ +     +++++++++ ++  +++++++    + ++",
        "+ ++++ ++++ +++ + +++ +++    ++    ++    ++ ++ + ++",
        "+ ++++    +     + +++ +++ ++ ++++++++ ++ ++ ++   ++",
        "+      ++ +++++++E+++     ++          ++    +++++++",
        "+++++++++++++++++++++++++++++++++++++++++++++++++++",
    ],
    8: [
        "S        E",
        "          ",
        "          ",
        "          ",
        "          ",
        "          ",
    ],
}


def nodes_per_sec(n):
    print(f"\n\nAverage of {n} runs")

    for algo, name in [
        [solve.SolveBfs, "BFS"],
        [solve.SolveDfs, "DFS"],
        [solve.SolveAStar, "A*"],
    ]:
        p = []
        [p.append(0) for _ in range(len(mazes_test.keys()))]
        for _ in range(n):

            for num in range(len(mazes_test.keys())):
                maze = algo(mazes_test[num + 1], "S", "E", " ", "+")
                p[num] += maze.searched / maze.time

        if n != 0:
            print(f"\n{name} average: {sum(p) / n / len(p)} nodes/s\n")
            [print(f"{name} maze {i+1}", p[i] / n, "nodes/s") for i in range(len(p))]


# visual test cases
def visual_solution(mazes):
    print(f'\n\nSolution to mazes {",".join([str(i) for i in mazes])}')
    for i in mazes:
        print(f"\nMaze {i}\n")
        maze = solve.SolveBfs(mazes_test[i], "S", "E", " ", "+", ".", verbose=True)
        maze.show()
        maze = solve.SolveDfs(mazes_test[i], "S", "E", " ", "+", ".", verbose=True)
        maze.show()
        maze = solve.SolveAStar(mazes_test[i], "S", "E", " ", "+", ".", verbose=True)
        maze.show()


# velocity test cases
nodes_per_sec(2)

# print the solution
visual_solution([1, 6, 8])
